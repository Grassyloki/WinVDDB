#SingleInstance Force
ProcessSetPriority "High"

; Load configuration from files generated by PowerShell
#Include WinVDDB_config.ahk
#Include WinVDDB_actions.ahk

; Global variables
global paused := false
global manualDesktop := 0
global manualDesktopTimeout := 0
global desktopSwitchCount := []

; Load the Virtual Desktop Accessor DLL
if !DllCall("LoadLibrary", "Str", dllPath) {
    MsgBox "Failed to load VirtualDesktopAccessor.dll"
    ExitApp
}

; Initialize desktop switch count array (for all desktops, 1-based)
Loop totalDisplays {
    desktopSwitchCount.Push(0)
}

; Setup hotkey for pausing/resuming rotation
Hotkey "F2", TogglePause

; Setup hotkeys for manual desktop selection (2-9)
Loop 8 {
    keyNum := A_Index + 1
    if (keyNum <= totalDisplays) {
        Hotkey keyNum, GoToDesktopManual
    }
}

; Start the desktop rotation
SetTimer RotateDesktops, displayTime

; Initialize taskbar auto-hide (enabled by default)
SetTaskbarAutoHide(true)

; Set timer to check manual desktop timeout
SetTimer CheckManualTimeout, 60000  ; Check every minute

; Function to rotate between desktops
RotateDesktops() {
    if (!paused && manualDesktop == 0) {
        GoToDesktop(desktopIndex)

        ; Increment switch count for the current desktop
        desktopSwitchCount[desktopIndex] += 1

        ; Check if we need to perform an action for this desktop
        if (desktopIndex <= desktopActions.Length && 
            desktopActions[desktopIndex].HasOwnProp("count") && 
            desktopActions[desktopIndex].count > 0 && 
            desktopSwitchCount[desktopIndex] >= desktopActions[desktopIndex].count) {
            
            desktopSwitchCount[desktopIndex] := 0  ; Reset the count
            
            if (desktopActions[desktopIndex].HasOwnProp("action") && 
                desktopActions[desktopIndex].action != "") {
                Send desktopActions[desktopIndex].action
            }
        }

        ; Increment and wrap around desktop index
        desktopIndex := (desktopIndex >= (startingDisplay + totalDisplays - startingDisplay)) ? 
                        startingDisplay : (desktopIndex + 1)
    }
}

; Function to check if manual desktop timeout has expired
CheckManualTimeout() {
    if (manualDesktop > 0) {
        manualDesktopTimeout -= 1
        if (manualDesktopTimeout <= 0) {
            manualDesktop := 0
            TrayTip "Returning to automatic rotation.", "Desktop Rotation"
        }
    }
}

; Function to switch to a specific desktop using Virtual Desktop Accessor
GoToDesktop(desktopNumber) {
    desktopNumber := desktopNumber - 1  ; Adjust to zero-based index
    DllCall("VirtualDesktopAccessor\GoToDesktopNumber", "UInt", desktopNumber)
    Sleep 2000  ; Allow some time for the desktop switch
}

; Function to toggle the pause state and show notification
TogglePause(*) {
    paused := !paused
    if (paused) {
        TrayTip "Rotation is paused. Taskbar auto-hide disabled.", "Desktop Rotation"
        SetTaskbarAutoHide(false)
    } else {
        TrayTip "Rotation resumed. Taskbar auto-hide enabled.", "Desktop Rotation"
        SetTaskbarAutoHide(true)
        ; Reset manual desktop when resuming
        manualDesktop := 0
    }
}

; Function to handle manual desktop selection via number keys
GoToDesktopManual(ThisHotkey) {
    if (!paused) {
        ; Get the number key that was pressed (2-9)
        keyPressed := SubStr(ThisHotkey, 1, 1)
        
        ; Only proceed if the key corresponds to a valid desktop
        if (keyPressed >= 1 && keyPressed <= totalDisplays) {
            manualDesktop := keyPressed
            manualDesktopTimeout := 60  ; Set timeout to 60 minutes
            
            GoToDesktop(manualDesktop)
            TrayTip "Staying on desktop " manualDesktop " for 60 minutes.", "Manual Desktop Selection"
        }
    }
}

; Function to set taskbar auto-hide
SetTaskbarAutoHide(enable) {
    APPBARDATA := Buffer(A_PtrSize = 4 ? 36 : 48, 0)
    NumPut("UInt", A_PtrSize = 4 ? 36 : 48, APPBARDATA, 0)
    NumPut("Int", enable ? 1 : 0, APPBARDATA, A_PtrSize = 4 ? 32 : 40)
    DllCall("Shell32.dll\SHAppBarMessage", "UInt", 0xA, "Ptr", APPBARDATA)
}

; Handle script exit
OnExit Exit

Exit(*) {
    DllCall("FreeLibrary", "Ptr", dllPath)
    ExitApp
}