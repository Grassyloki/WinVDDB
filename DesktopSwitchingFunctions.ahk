#Persistent
#SingleInstance, force
SetBatchLines, -1

; Load configuration from files generated by PowerShell
#Include %A_ScriptDir%\WinVDDB_config.ahk
#Include %A_ScriptDir%\WinVDDB_actions.ahk

; Load the Virtual Desktop Accessor DLL
if !DllCall("LoadLibrary", "Str", dllPath) {
    MsgBox, Failed to load VirtualDesktopAccessor.dll
    ExitApp
}

; Global variables
global paused := false
global manualDesktop := 0
global manualDesktopTimeout := 0
global desktopSwitchCount := []

; Initialize desktop switch count array
Loop, % totalDisplays + 1 {
    desktopSwitchCount.Push(0)
}

; Setup hotkey for pausing/resuming rotation
Hotkey, F2, TogglePause

; Setup hotkeys for manual desktop selection (2-9)
Loop, 8 {
    keyNum := A_Index + 1
    if (keyNum <= totalDisplays) {
        Hotkey, %keyNum%, GoToDesktopManual
    }
}

; Start the desktop rotation
SetTimer, RotateDesktops, %displayTime%

; Initialize taskbar auto-hide (enabled by default)
SetTaskbarAutoHide(true)

; Set timer to check manual desktop timeout
SetTimer, CheckManualTimeout, 60000  ; Check every minute

return

; Function to rotate between desktops
RotateDesktops:
if (!paused && manualDesktop == 0) {
    GoToDesktop(desktopIndex)

    ; Increment switch count for the current desktop
    desktopSwitchCount[desktopIndex] += 1

    ; Check if we need to perform an action for this desktop
    if (desktopActions[desktopIndex].count > 0 && desktopSwitchCount[desktopIndex] >= desktopActions[desktopIndex].count) {
        desktopSwitchCount[desktopIndex] := 0  ; Reset the count
        if (desktopActions[desktopIndex].action != "") {
            if (desktopActions[desktopIndex].action) {
                Send, % desktopActions[desktopIndex].action
            }
        }
    }

    ; Increment and wrap around desktop index
    desktopIndex := (desktopIndex >= (startingDisplay + totalDisplays - 1)) ? startingDisplay : (desktopIndex + 1)
}
return

; Function to check if manual desktop timeout has expired
CheckManualTimeout:
if (manualDesktop > 0) {
    manualDesktopTimeout -= 1
    if (manualDesktopTimeout <= 0) {
        manualDesktop := 0
        TrayTip, Desktop Rotation, Returning to automatic rotation., 1, 1
    }
}
return

; Function to switch to a specific desktop using Virtual Desktop Accessor
GoToDesktop(desktopNumber) {
    desktopNumber := desktopNumber - 1  ; Adjust to zero-based index
    DllCall("VirtualDesktopAccessor\GoToDesktopNumber", "UInt", desktopNumber)
    Sleep, 2000  ; Allow some time for the desktop switch
}

; Function to toggle the pause state and show notification
TogglePause:
paused := !paused
if (paused) {
    TrayTip, Desktop Rotation, Rotation is paused. Taskbar auto-hide disabled., 1, 1
    SetTaskbarAutoHide(false)
} else {
    TrayTip, Desktop Rotation, Rotation resumed. Taskbar auto-hide enabled., 1, 1
    SetTaskbarAutoHide(true)
    ; Reset manual desktop when resuming
    manualDesktop := 0
}
return

; Function to handle manual desktop selection via number keys
GoToDesktopManual:
if (!paused) {
    ; Get the number key that was pressed (2-9)
    keyPressed := SubStr(A_ThisHotkey, 1, 1)
    
    ; Only proceed if the key corresponds to a valid desktop
    if (keyPressed >= 2 && keyPressed <= totalDisplays + 1) {
        manualDesktop := keyPressed
        manualDesktopTimeout := 60  ; Set timeout to 60 minutes
        
        GoToDesktop(manualDesktop)
        TrayTip, Manual Desktop Selection, Staying on desktop %manualDesktop% for 60 minutes., 1, 1
    }
}
return

; Function to set taskbar auto-hide
SetTaskbarAutoHide(enable) {
    VarSetCapacity(APPBARDATA, A_PtrSize=4 ? 36:48)
    NumPut(A_PtrSize=4 ? 36:48, APPBARDATA, 0, "uint")
    NumPut(enable ? 1:0, APPBARDATA, A_PtrSize=4 ? 32:40, "int")
    DllCall("Shell32.dll\SHAppBarMessage", "uint", 0xA, "ptr", &APPBARDATA)
}

; Ensure the script terminates when closed
ExitApp:
DllCall("FreeLibrary", "Ptr", DllPath)  ; Optionally free the DLL
ExitApp