#SingleInstance Force
ProcessSetPriority "High"

; Initialize error log file
logFilePath := A_ScriptDir "\Logs\AHK_Error.log"
SplitPath logFilePath, , logDir
if !DirExist(logDir)
    DirCreate(logDir)

FileAppend("Script started: " A_Now "`n", logFilePath)

try {
    ; Load configuration from files generated by PowerShell
    #Include WinVDDB_config.ahk
    #Include WinVDDB_actions.ahk
    
    FileAppend("Configuration files loaded successfully`n", logFilePath)
} catch Error as e {
    FileAppend("Error loading configuration files: " e.Message " " e.Extra "`n", logFilePath)
    MsgBox "Error loading configuration files: " e.Message
    ExitApp
}

; Global variables
global paused := false
global manualDesktop := 0
global manualDesktopTimeout := 0
global desktopSwitchCount := []

; Log DLL path
FileAppend("DLL Path: " dllPath "`n", logFilePath)

; Verify the DLL file exists
if !FileExist(dllPath) {
    errorMsg := "ERROR: VirtualDesktopAccessor.dll file does not exist at: " dllPath
    FileAppend(errorMsg "`n", logFilePath)
    MsgBox errorMsg
    ExitApp
}

; Load the Virtual Desktop Accessor DLL
if !DllCall("LoadLibrary", "Str", dllPath) {
    errorMsg := "Failed to load VirtualDesktopAccessor.dll at: " dllPath
    FileAppend(errorMsg "`n", logFilePath)
    MsgBox errorMsg
    ExitApp
}

FileAppend("DLL loaded successfully`n", logFilePath)

; Initialize desktop switch count array (for all desktops, 1-based)
Loop totalDisplays {
    desktopSwitchCount.Push(0)
}

; Setup hotkey for pausing/resuming rotation
try {
    Hotkey "F2", TogglePause
    FileAppend("F2 hotkey registered for TogglePause`n", logFilePath)
} catch Error as e {
    FileAppend("ERROR registering F2 hotkey: " e.Message "`n", logFilePath)
}

; Setup hotkeys for manual desktop selection (2-9)
try {
    Loop 8 {
        keyNum := A_Index + 1
        if (keyNum <= totalDisplays) {
            Hotkey keyNum, GoToDesktopManual
            FileAppend("Registered hotkey " keyNum " for manual desktop selection`n", logFilePath)
        }
    }
} catch Error as e {
    FileAppend("ERROR registering number hotkeys: " e.Message "`n", logFilePath)
}

; Start the desktop rotation
try {
    FileAppend("Setting up rotation timer with interval: " displayTime "ms`n", logFilePath)
    SetTimer(RotateDesktops, displayTime)
    FileAppend("Rotation timer started successfully`n", logFilePath)
} catch Error as e {
    FileAppend("ERROR setting up rotation timer: " e.Message "`n", logFilePath)
    MsgBox("Error setting up rotation timer: " e.Message)
}

; Initialize taskbar auto-hide (enabled by default)
try {
    FileAppend("Initializing taskbar auto-hide`n", logFilePath)
    SetTaskbarAutoHide(true)
    FileAppend("Taskbar auto-hide enabled`n", logFilePath)
} catch Error as e {
    FileAppend("ERROR setting taskbar auto-hide: " e.Message "`n", logFilePath)
}

; Set timer to check manual desktop timeout
try {
    FileAppend("Setting up manual desktop timeout timer (60000ms)`n", logFilePath)
    SetTimer(CheckManualTimeout, 60000)  ; Check every minute
    FileAppend("Manual desktop timeout timer started successfully`n", logFilePath)
} catch Error as e {
    FileAppend("ERROR setting up manual desktop timeout timer: " e.Message "`n", logFilePath)
}

; Function to rotate between desktops
RotateDesktops() {
    try {
        FileAppend("RotateDesktops called. Current index: " desktopIndex "`n", logFilePath)
        
        if (!paused && manualDesktop == 0) {
            GoToDesktop(desktopIndex)

            ; Increment switch count for the current desktop
            desktopSwitchCount[desktopIndex] += 1
            FileAppend("Incremented switch count for desktop " desktopIndex " to " desktopSwitchCount[desktopIndex] "`n", logFilePath)

            ; Check if we need to perform an action for this desktop
            if (desktopIndex <= desktopActions.Length && 
                desktopActions[desktopIndex].HasOwnProp("count") && 
                desktopActions[desktopIndex].count > 0 && 
                desktopSwitchCount[desktopIndex] >= desktopActions[desktopIndex].count) {
                
                desktopSwitchCount[desktopIndex] := 0  ; Reset the count
                FileAppend("Reset switch count for desktop " desktopIndex "`n", logFilePath)
                
                if (desktopActions[desktopIndex].HasOwnProp("action") && 
                    desktopActions[desktopIndex].action != "") {
                    FileAppend("Sending action for desktop " desktopIndex ": " desktopActions[desktopIndex].action "`n", logFilePath)
                    Send(desktopActions[desktopIndex].action)
                }
            }

            ; Increment and wrap around desktop index
            oldIndex := desktopIndex
            desktopIndex := (desktopIndex >= (startingDisplay + totalDisplays - startingDisplay)) ? 
                            startingDisplay : (desktopIndex + 1)
            FileAppend("Incremented desktop index from " oldIndex " to " desktopIndex "`n", logFilePath)
        } else {
            FileAppend("Rotation paused or manual desktop selected. paused=" paused ", manualDesktop=" manualDesktop "`n", logFilePath)
        }
    } catch Error as e {
        FileAppend("ERROR in RotateDesktops: " e.Message " " e.Extra "`n", logFilePath)
    }
}

; Function to check if manual desktop timeout has expired
CheckManualTimeout() {
    try {
        if (manualDesktop > 0) {
            FileAppend("CheckManualTimeout: manualDesktop=" manualDesktop ", timeout=" manualDesktopTimeout "`n", logFilePath)
            manualDesktopTimeout -= 1
            if (manualDesktopTimeout <= 0) {
                FileAppend("Manual desktop timeout expired, returning to automatic rotation`n", logFilePath)
                manualDesktop := 0
                TrayTip("Returning to automatic rotation.", "Desktop Rotation")
            }
        }
    } catch Error as e {
        FileAppend("ERROR in CheckManualTimeout: " e.Message "`n", logFilePath)
    }
}

; Function to switch to a specific desktop using Virtual Desktop Accessor
GoToDesktop(desktopNumber) {
    try {
        FileAppend("GoToDesktop called with desktop number: " desktopNumber "`n", logFilePath)
        desktopNumber := desktopNumber - 1  ; Adjust to zero-based index
        
        ; Get current desktop number for logging
        currentDesktop := DllCall("VirtualDesktopAccessor\GetCurrentDesktopNumber")
        FileAppend("Current desktop before switch: " currentDesktop "`n", logFilePath)
        
        ; Switch desktop
        result := DllCall("VirtualDesktopAccessor\GoToDesktopNumber", "UInt", desktopNumber)
        FileAppend("GoToDesktopNumber call result: " result "`n", logFilePath)
        
        Sleep 2000  ; Allow some time for the desktop switch
        
        ; Verify the switch worked
        newDesktop := DllCall("VirtualDesktopAccessor\GetCurrentDesktopNumber")
        FileAppend("Current desktop after switch: " newDesktop "`n", logFilePath)
        
        if (newDesktop != desktopNumber) {
            FileAppend("WARNING: Desktop switch may have failed. Requested: " desktopNumber ", Actual: " newDesktop "`n", logFilePath)
        }
    } catch Error as e {
        FileAppend("ERROR in GoToDesktop: " e.Message " " e.Extra "`n", logFilePath)
    }
}

; Function to toggle the pause state and show notification
TogglePause(*) {
    try {
        FileAppend("TogglePause called, current state: " paused "`n", logFilePath)
        paused := !paused
        if (paused) {
            FileAppend("Rotation paused`n", logFilePath)
            TrayTip("Rotation is paused. Taskbar auto-hide disabled.", "Desktop Rotation")
            SetTaskbarAutoHide(false)
        } else {
            FileAppend("Rotation resumed`n", logFilePath)
            TrayTip("Rotation resumed. Taskbar auto-hide enabled.", "Desktop Rotation")
            SetTaskbarAutoHide(true)
            ; Reset manual desktop when resuming
            manualDesktop := 0
        }
    } catch Error as e {
        FileAppend("ERROR in TogglePause: " e.Message "`n", logFilePath)
    }
}

; Function to handle manual desktop selection via number keys
GoToDesktopManual(ThisHotkey) {
    try {
        FileAppend("GoToDesktopManual called with hotkey: " ThisHotkey "`n", logFilePath)
        
        if (!paused) {
            ; Get the number key that was pressed (2-9)
            keyPressed := SubStr(ThisHotkey, 1, 1)
            FileAppend("Key pressed: " keyPressed "`n", logFilePath)
            
            ; Only proceed if the key corresponds to a valid desktop
            if (keyPressed >= 1 && keyPressed <= totalDisplays) {
                manualDesktop := keyPressed
                manualDesktopTimeout := 60  ; Set timeout to 60 minutes
                FileAppend("Setting manual desktop to " manualDesktop " with 60 minute timeout`n", logFilePath)
                
                GoToDesktop(manualDesktop)
                TrayTip("Staying on desktop " manualDesktop " for 60 minutes.", "Manual Desktop Selection")
            } else {
                FileAppend("Invalid desktop number: " keyPressed "`n", logFilePath)
            }
        } else {
            FileAppend("Ignoring manual desktop selection because rotation is paused`n", logFilePath)
        }
    } catch Error as e {
        FileAppend("ERROR in GoToDesktopManual: " e.Message "`n", logFilePath)
    }
}

; Function to set taskbar auto-hide
SetTaskbarAutoHide(enable) {
    try {
        FileAppend("SetTaskbarAutoHide called with enable=" enable "`n", logFilePath)
        
        APPBARDATA := Buffer(A_PtrSize = 4 ? 36 : 48, 0)
        NumPut("UInt", A_PtrSize = 4 ? 36 : 48, APPBARDATA, 0)
        NumPut("Int", enable ? 1 : 0, APPBARDATA, A_PtrSize = 4 ? 32 : 40)
        
        result := DllCall("Shell32.dll\SHAppBarMessage", "UInt", 0xA, "Ptr", APPBARDATA)
        FileAppend("SHAppBarMessage call result: " result "`n", logFilePath)
    } catch Error as e {
        FileAppend("ERROR in SetTaskbarAutoHide: " e.Message "`n", logFilePath)
    }
}

; Handle script exit
FileAppend("Registering OnExit handler`n", logFilePath)
OnExit(ExitFunc)

ExitFunc(*) {
    try {
        FileAppend("Exit function called`n", logFilePath)
        hModule := DllCall("GetModuleHandle", "Str", dllPath)
        FileAppend("GetModuleHandle result: " hModule "`n", logFilePath)
        
        if (hModule) {
            result := DllCall("FreeLibrary", "Ptr", hModule)
            FileAppend("FreeLibrary result: " result "`n", logFilePath)
        }
    } catch Error as e {
        FileAppend("ERROR in Exit handler: " e.Message "`n", logFilePath)
    }
    
    FileAppend("Script exiting`n", logFilePath)
    ExitApp
}